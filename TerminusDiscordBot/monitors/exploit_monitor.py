import discord
import asyncio
import os
from utils.embed_factory import create_embed_response

class ExploitLogMonitor:
    def __init__(self, bot, channel_id, file_path):
        self.bot = bot
        self.channel_id = channel_id
        self.file_path = file_path
        try:
            self.last_size = os.path.getsize(file_path)
        except FileNotFoundError:
            self.last_size = 0

    async def send_alert(self, content):
        channel = self.bot.get_channel(self.channel_id)
        if channel:
            embed = create_embed_response("⚠️ EXPLOIT DETECTED", f"[EXPLOIT]: {content}", color=0xffc107)      
            await channel.send(embed=embed)

    async def loop(self):
        while True:
            try:
                if not os.path.exists(self.file_path):
                    await asyncio.sleep(5)
                    continue

                current_size = os.path.getsize(self.file_path)
                if current_size < self.last_size:
                    self.last_size = 0  # Reset on file rotation

                if current_size > self.last_size:
                    with open(self.file_path, 'r', encoding='utf-8', errors='ignore') as f:
                        f.seek(self.last_size)
                        new_lines = f.readlines()
                        self.last_size = f.tell()

                        for line in new_lines:
                            line = line.strip()
                            if line:
                                await self.send_alert(line)

                await asyncio.sleep(2)

            except Exception as e:
                print(f"[EXPLOIT MONITOR ERROR] {e}")
                await asyncio.sleep(5)
